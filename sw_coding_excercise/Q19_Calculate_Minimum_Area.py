'''
'21.10.16(금) SW Coding Excercises
-------------------------------------------------------------------------------------------------------------
1. 사물인식 최소면적 산출 프로그램 만들기

당신은 직장에서 레이더 기술을 활용해 차량 주변의 장애물과 사물을 인식하는 프로그램을 만드는 업무를 담당하고 있다.
당신은 다양한 입력 값들로 인식된 사물에 대해 최소 면적을 계산해보는 테스트를 하는 중이다. 이번 테스트의 조건은 다음과 같다.

레이더를 통해 인식된 정보의 입력값은 평면에 N개의 점으로 주어진다.
각각의 점들은 총 K개의 색깔 중 하나를 가지고 있다.
각 점의 색깔은 {1, 2, …, K} 중의 한 정수로 표현된다.

당신은 입력값으로 주어진 K개의 색깔 {1, 2, …, K}에 대해 해당 색깔을 가지는 점들을 적어도 하나씩 포함하는
사물 중 넓이가 가장 작은 것을 찾아서 그 넓이를 출력하는 프로그램을 작성하려고 한다.
이 때, 각 점을 포함한 사물은 반드시 직사각형으로 인식된다.

여기서 사물로 인식되는 직사각형은 네 변이 모두 수평 혹은 수직인 것에 한정하며,
직사각형의 내부가 아닌 경계에 놓은 점들도 그 직사각형에 포함된다고 생각한다.
직사각형의 가로 또는 세로의 길이가 0이 되어 선분 혹은 점으로 나타나는 경우도 직사각형의 한 경우로 생각하며
이런 경우 직사각형의(사물) 넓이는 0이다. (하나의 좌표에 여러 개의 점이 있을 수 있다)

주어지는 입력값에 대해 K개의 색을 가진 점들을 적어도 하나씩 포함하는 사물(직사각형) 중
넓이가 가장 작은 것의 넓이를 출력하는 프로그램을 만들어 보자.

* (10점) 1 ≤ K ≤ 2
* (15점) 1 ≤ N ≤ 10
* (25점) 1 ≤ N ≤ 40
* (50점) 추가 제약 조건 없음.

<입력형식>
입력으로 점의 개수인 자연수 N과 각 점들이 가질 수 있는 색깔의 총 개수인 자연수 K가 첫 줄에 주어진다.
이후 N줄에는 입력으로 주어지는 점의 좌표(x, y)와 그 점의 색깔 k가 세 개의 정수 x, y, k로 각 줄에 주어진다.

* 1 ≤ N ≤ 100
* 1 ≤ K ≤ 20
* -1,000 ≤ x, y ≤ 1,000
* 1 ≤ k ≤ K

<출력형식>
주어진 입력에 대해 K개의 색깔 {1, 2, …, K} 각각에 대해 해당 색깔을 가지는 점들을
적어도 하나씩 포함하는 사물(직사각형)중 넓이가 가장 작은 것을 찾아서 그 넓이를 정수 형태로 출력한다.
-------------------------------------------------------------------------------------------------------------
1. 데이터 입력 (N, M)

# map()함수를 이용하여 input()에 입력된 숫자를 int형으로 변환시킴
# split()를 이용하면 입력한 데이터를 띄어쓰기 기준으로 하나씩 잘라 줌 
# split()은 default가 띄어쓰기로 되어 있고, 예를 들어 , 기준으로 자르길 원하면 split(',')라고 입력함
# input()은 기본적으로 데이터를 문자열로 입력함
# 리스트 컴프리헨션 이용하면 한 줄에 루프문 실행하여 리스트를 생성할 수 있음
'''

N, K = map(int, input().split())   
data = [list(map(int, input().split())) for _ in range(N)]  # 리스트 컴프리헨션
print(data)

'''
-------------------------------------------------------------------------------------------------------------
▷ 출력
5 3
3 7 1
5 8 1
6 5 2
7 1 3
9 3 3
[[3, 7, 1], [5, 8, 1], [6, 5, 2], [7, 1, 3], [9, 3, 3]]
-------------------------------------------------------------------------------------------------------------
2. 원데이터에서 색깔 분류
   색깔별로 데이터 좌표를 분류하여 따로 묶어 준다.
'''
arr = []
for i in range(K):
    arr.append([])
    for j in data:
        if j[2] == i+1:
            arr[i].append([j[0],j[1]])
print(arr)

'''
▷ 출력 
[[[3, 7], [5, 8]], [[6, 5]], [[7, 1], [9, 3]]]
-------------------------------------------------------------------------------------------------------------
3. 여러 개 점들 중에서 2개 색깔 점을 조합으로 선택 (재귀함수사용)
'''
# arr : 원 데이터
# n   : 선택하는 점의 숫자

def combination_new(arr,n):
    if n == 0:                      # 선택하는 점이 없을 경우, 빈 리스트 반환
        return [[]]                 # 원 데이터가 2차원 배열 형태이므로 2차원으로 하기
    
    result = []
    for i in range(0, len(arr)):
        first_element = arr[i]      # 첫번째 선택한 점 뭉치 (같은 색깔 한 뭉치)
        rest_elements = arr[i+1:]   # 선택한 첫번째 점 뭉치를 제외한 나머지 점 뭉치 (다른 색깔 여러 뭉치들)
        
        for X in combination_new(rest_elements, n-1):
            combi = [first_element] + X   # 첫번째 점 뭉치와 나머지 점 뭉치를 조합으로 불러와서 리스트 합치기
            result.append(combi)          # append()를 이용하여 result 리스트에 저장
    
    return result
'''
-------------------------------------------------------------------------------------------------------------
4. 조합 함수 실행
result = combination_new(arr,2)
print(result)

▷ 출력
[[[[3, 7], [5, 8]], [[6, 5]]],
 [[[3, 7], [5, 8]], [[7, 1], [9, 3]]],
 [[[6, 5]], [[7, 1], [9, 3]]]]
-------------------------------------------------------------------------------------------------------------
4. 2개 색깔 선택 조합으로 뭉쳐진 색깔 조합 점 뭉치들에 빠진 색깔이 다시 들어가게 추가 배열
'''
for i in result:          # 색깔 기준 조합으로 뭉쳐진 점 뭉치들 i를 하나씩 불러오기
    for j in arr:         # 원 데이터 서로 다른 색깔 뭉치들 j를 하나씩 불어오기
        if j not in i:    # j는 i에 있는 색깔 뭉치가 아닌 것으로 골라야 함 (각 색깔이 적어도 1개 있어야 하기 때문)
            i.append(j)   # i에 j를 더해서 저장하기
print(result)
'''
▷ 출력
[[[[3, 7], [5, 8]], [[6, 5]], [[7, 1], [9, 3]]],
 [[[3, 7], [5, 8]], [[7, 1], [9, 3]], [[6, 5]]],
 [[[6, 5]], [[7, 1], [9, 3]], [[3, 7], [5, 8]]]]
-------------------------------------------------------------------------------------------------------------
5. <함수1> 최종 만들어진 result 배열에서 점 가져오기
'''
def getpoint(arr):
    global K                                 # 전역 변수 K 선언 (K : 색깔의 갯수)
    result = []                              # 빈 리스트 선언

    for i in range(len(arr)):                # arr 배열 행 갯수 횟수대로 0 ~ i 반복
        for j in range(len(arr[i][0])):      # arr 배열 i행에서 0번째 요소의 갯수 횟수대로 0 ~ j 반복
            p1 = arr[i][0][j]                # arr 배열 i행에서 0번째 요소의 j번째 요소 불러오기
            for k in range(len(arr[i][1])):  # arr 배열 i행에서 1번째 요소의 갯수 횟수대로 0 ~ k 반복
                p2 = arr[i][1][k]            # arr 배열 i행에서 1번째 요소의 k번째 요소 불러오기
                if K == 2:                   # 색깔 갯수 K가 2이면
                    result.append([p1,p2])   # 빈 리스트에 p1과 p2 리스트를 합하여 넣기
                else:
                    if check(p1,p2,arr[i][2:]):
                        result.append([p1,p2])
    return result
'''
-------------------------------------------------------------------------------------------------------------
6. <함수2> 가지고 온 2개의 점 p1, p2의 좌표 영역에 나머지 점들이 속해 있는지 확인
'''
def check(p1,p2,rest_arr):
    ch_result = False
    x1 = min(p1[0], p2[0])                      # 두 점의 x 좌표 중 최소값
    x2 = max(p1[0], p2[0])                      # 두 점의 x 좌표 중 최대값
    y1 = min(p1[1], p2[1])                      # 두 점의 y 좌표 중 최소값
    y2 = max(p1[1], p2[1])                      # 두 점의 y 좌표 중 최대값
    
    for i in rest_arr:         # 두 점 외의 색깔별로 분리된 나머지 점 뭉치들을 하나씩 불러오기
        for j in i:            # 나머지 점뭉치들 안의 점을 하나씩 불러오기 
            if j[0] >= x1 and j[0] <= x2:       # 불러온 점이 이미 선택한 2점들의 x좌표 사이에 있는지 확인
                if j[1] >= y1 and j[1] <= y2:   # 불러온 점이 이미 선택한 2점들의 y좌표 사이에 있는지 확인
                    ch_result = True            # 위 조건에 모두 만족할 때, ch_result 변수에 True 신호 입력
                    break                       # True 신호가 입력되면 연결된 for문에서 바로 빠져 나오기
                else:
                    ch_result = False
            else:
                ch_result = False
        if ch_result == True:                   # For문에서 빠져 나왔는데, ch_result 변수가 True인지 다시 확인
            break                               # True 신호가 입력되면 전체 for문에서 바로 빠져 나오기
    return ch_result                            # ch_result 결과를 반환
'''
-------------------------------------------------------------------------------------------------------------
7. 데이터 입력하여 함수 실행
'''
final_lst = getpoint(result)
print(final_lst)

'''
▷ 출력
[[[3, 7], [7, 1]], [[3, 7], [9, 3]], [[5, 8], [7, 1]], [[5, 8], [9, 3]]]
-------------------------------------------------------------------------------------------------------------
8. <함수3> 조건에 맞는 점 뭉치들 중 2점간 사각형 넓이 최소값 선택하기
'''
def getminArea(arr):
    if arr == []:
        return 0
    
    area_lst = []
    for i in arr:
        x1 = i[0][0]
        x2 = i[1][0]
        y1 = i[0][1]
        y2 = i[1][1]
        area = abs(x1-x2) * abs(y1-y2)
        area_lst.append(area)
    minArea = min(area_lst)
    return minArea
'''
-------------------------------------------------------------------------------------------------------------
9. 면적계산 함수3을 이용하여 최종값 산출
'''
final_minArea = getminArea(getpoint(result))
print('모든 색깔의 점들을 품는 두 점의 사각형 면적 최소값 : ',final_minArea)

'''
▷ 출력
모든 색깔의 점들을 품는 두 점의 사각형 면적 최소값 :  14
-------------------------------------------------------------------------------------------------------------
'''
