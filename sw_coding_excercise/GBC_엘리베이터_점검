GBC 엘리베이터 점검

엘리베이터 정비공인 광우는 0m부터 100m까지 일정 구간들의 엘리베이터 속도를 검사하는 업무를 맡게 되었다.
빌딩에서 운영되는 엘리베이터 구간은 N개의 구간으로 나뉘며 해당 구간의 제한 속도가 주어진다.
구간 총합은 100m이며 각 구간별 구간길이와 제한속도 모두 양의 정수로 주어진다. 예를 들어보자.
구간이 3이라고 할 때,

▶ 첫 번째 구간 길이는 50m 이고 제한 속도는 50m/s
▶ 두 번째 구간 길이는 40m 이고 제한 속도는 40m/s
▶ 세 번째 구간 길이는 10m 이고 제한 속도는 30m/s

이 구간에서 제한 속도를 벗어나면(즉 제한속도를 초과하면) 서버에 초과한 만큼의 속도가 로그에 남는다.
불행하게도 현재 서버 상태가 off 상태임으로 광우는 서버 데이터를 받아볼 수가 없다.
광우는 임의의 구간 길이와 속도를 정하여 시범운행할 때, 제한 속도가 가장 크게 벗어난 값을 스스로 구해야 한다.

M개의 구간을 검사한다고 할 때, 예를 들면,
▶ 첫 번째 구간 운행 길이는 60m 이고 속도는 76m/s
▶ 두 번째 구간 운행 길이는 18m 이고 속도는 28m/s
▶ 세 번째 구간 운행 길이는 22m 이고 속도는 50m/s
이라고 했을 때, 제한 속도를 벗어나 가장 차이가 큰 속도를 구해 보자.

첫 번째 구간 50m 까지에서 제한 속도와 실제 운행 속도를 비교했을 때, 제한 속도를 26m/s 초과했다.
이후 두 번째 구간과 실 운행한 첫 번째 구간이 10m 정도 겹치는데, 이 때 제한 속도를 36m/s 초과하게 된다.
그 이후 구간들에서는 차이가 그보다 크지 않으므로 가장 큰 속도 차이는 36m/s임을 알 수 있다.
주어진 구간의 제한속도와 광우가 테스트한 구간의 속도를 기준으로 가장 크게 제한 속도를 넘어간 값이 얼마인지 구해보자.

<입력>
첫 줄에 N과 M이 주어진다.
그 다음 줄부터 N개의 줄은 각 구간의 길이 및 해당 구간에서의 제한 속도가 주어지며,
다음 M개의 줄은 광우가 테스트하는 구간의 길이와 속도가 주어진다.
(N : 엘리베이터 구간 수, M : 스스로 검사하는 구간 수)

N M
3 3
50 50
40 40
10 30
60 76
18 28
22 50

N M
3 3
50 90
10 90
40 50
50 40
10 100
40 40

<출력>
광우가 시범운행을 하는 동안 제한 속도를 가장 크게 벗어난 값을 출력한다.
단 제한 속도를 벗어나지 않은 경우는 0을 출력한다.

36
10
________________________________________________________________________

# 데이터 입력
N, M = map(int,input("N, M을 입력하세요").split())
inputArray = [list(map(int,input().split())) for _ in range(N+M)]
print(inputArray)

▷ 출력
[[50,90],[10,90],[40,50],[50,40],[10,100],[40,40]]
________________________________________________________________________
stan = inputArray[:N]    # inputArray를 기준 부분을 가져와서 stan에 저장 
test = inputArray[N:]    # inputArray를 테스트 부분을 가져와서 test에 저장

stan2 = stan.copy()      # stan 원본 데이터 보존하기 위해 복사본 생성
test2 = test.copy()      # test 원본 데이터 보존하기 위해 복사본 생성

i = 0                    # stan의 구성수 만큼 반복문 카운트를 위해 초기값 0 설정
j = 0                    # test의 구성수 만큼 반복문 카운트를 위해 초기값 0 설정
result = []              # 결과를 저장할 빈 리스트 생성
while i < N:                                   # 기준 구간수인 N 만큼 반복문 실행
    diff_dis = test[j][0]-stan[i][0]           # (i번째 시범구간길이)과 (i번째 기준구간길이)의 차이
    diff_v = test[j][1]-stan[i][1]             # (j번째 시범구간의 속도)과 (j번째 기준구간의 속도)의 차이
    
    if diff_v < 0:                             # 속도차가 음수일 때 (= 제한속도를 초과하지 않을 때)
        diff_v = 0                             # 속도차 변수에 0 입력
    
    if diff_dis >= 0:                          # 구간길이차가 0보다 같거나 클 때 (= 시범구간길이가 기준구간길이와 같거나 클 때)
        result.append([stan[i][0],diff_v])     # [i번째 기준구간길이, 해당하는 속도차] result 리스트에 입력
        test[j][0] = diff_dis                  # j번째 시범구간길이에 해당하는 구간길이차를 덮어씌워 입력 (현재까지 i = j)
        i += 1                                 # i에 1을 더해 줌 (여기까지는 i+1 = j)
        if diff_dis == 0:                      # 구간길이차가 0이면,(= 구간길이차가 0이 될 때까지는 j가 숫자가 증가하지 않음)
            j += 1                             # j에 1을 더해 줌 (여기까지는 다시 i+1 = j+1)
    
    elif diff_dis < 0:                         # 구간길이차가 0보다 작은 때 (= 기준구간길이가 시범구간길이와 같거나 클 때)
        result.append([test[j][0],diff_v])     # 
        stan[i][0] = -diff_dis
        j += 1
        
max_v = result[0][1]

for i in result:
    if i[1] > max_v:
        max_v = i[1]
        
print(result)
print(max_v)
________________________________________________________________________
