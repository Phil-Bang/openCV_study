'''
미로 안의 개미 이동

영일이는 생명과학에 관심이 생겨 왕개미를 연구하고 있었다.
왕개미를 유심히 살펴보던 중 특별히 성실해 보이는 개미가 있었는데,
그 개미는 개미굴에서 나와 먹이까지 가장 빠른 길로 이동하는 것이었다.

개미는 오른쪽으로 움직이다가 벽을 만나면 아래쪽으로 움직여 가장 빠른 길로 움직였다.
(오른쪽에 길이 나타나면 다시 오른쪽으로 움직인다.)

이에 호기심이 생긴 영일이는 그 개미를 미로 상자에 넣고 살펴보기 시작하였다.
미로 상자에 넣은 개미는 먹이를 찾았거나, 더 이상 움직일 수 없을 때까지
오른쪽 또는 아래쪽으로만 움직였다.

미로 상자의 구조가 0(갈 수 있는 곳), 1(벽 또는 장애물)로 주어지고,
먹이가 2로 주어질 때, 성실한 개미의 이동 경로를 예상해보자.
단, 맨 아래의 가장 오른쪽에 도착한 경우, 더 이상 움직일 수 없는 경우, 먹이를 찾은 경우에는
더이상 이동하지 않고 그 곳에 머무른다고 가정한다.

미로 상자의 테두리는 모두 벽으로 되어 있으며,
개미집은 반드시 (2, 2)에 존재하기 때문에 개미는 (2, 2)에서 출발한다.

<입력>
10 * 10 크기의 미로 상자의 구조와 먹이의 위치가 입력된다.

1 1 1 1 1 1 1 1 1 1
1 0 0 1 0 0 0 0 0 1
1 0 0 1 1 1 0 0 0 1
1 0 0 0 0 0 0 1 0 1
1 0 0 0 0 0 0 1 0 1
1 0 0 0 0 1 0 1 0 1
1 0 0 0 0 1 2 1 0 1
1 0 0 0 0 1 0 0 0 1
1 0 0 0 0 0 0 0 0 1
1 1 1 1 1 1 1 1 1 1

<출력>
성실한 개미가 이동한 경로를 9로 표시해 출력한다.

1 1 1 1 1 1 1 1 1 1
1 9 9 1 0 0 0 0 0 1
1 0 9 1 1 1 0 0 0 1
1 0 9 9 9 9 9 1 0 1
1 0 0 0 0 0 9 1 0 1
1 0 0 0 0 1 9 1 0 1
1 0 0 0 0 1 9 1 0 1
1 0 0 0 0 1 0 0 0 1
1 0 0 0 0 0 0 0 0 1
1 1 1 1 1 1 1 1 1 1
'''

# 방법1
lst = []
for i in range(10):
    lst.append([])
    k = input().split()
    for e in k:
        lst[i].append(int(e))
x, y = 1, 1
flag = True

while flag:
    if lst[x][y] == 2:
        lst[x][y] = 9
        flag = False
    elif (lst[x][y+1]) == 1:
        if lst[x+1][y] == 1:
            lst[x][y] = 9
            flag = False
        else:
            lst[x][y] = 9
            x += 1
    else:
        lst[x][y] = 9
        y += 1
for i in lst:
    print(' '.join(map(str, i)))


# 방법2
n, m = 10, 10   # 미로맵 사이즈 입력
maze_map = [list(map(int, input())) for _ in range(n)]   # 미로맵 리스트 생성
maze = copy.deepcopy(copy.deepcopy(maze_map))            # 미로맵 리스트 카피 (원본데이터 보존)

def maze_move(x, y):
    c = [x, y]                        # 미로맵 한 개의 좌표 리스트 생성
    while c:
        x = c[0]                      # x좌표
        y = c[1]                      # y좌표
        if x == n and y == m:         # 미로맵에서 벗어나면 탈출
            break
        elif maze[x][y] == 0:
            maze[x][y] = 9            # 현 좌표값이 0이면 9입력
        elif maze[x][y+1] == 0:
            maze[x][y+1] = 9          # 현 좌표의 오른쪽 한 칸의 좌표값이 0이면 9입력
            c = [x,y+1]               # 그 좌표로 c에 입력
        elif maze[x+1][y] == 0:
            maze[x+1][y] = 9
            c = [x+1,y]
        elif maze[x+1][y] == 2:
            maze[x+1][y] = 9
            c = [x+1,y]
            break
        else:
            break
    return maze
maze_move(1, 1)

