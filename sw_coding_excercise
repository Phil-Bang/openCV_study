### ◈ '21.10.16(금) SW Coding Excercises
<b> 1. 사물인식 최소면적 산출 프로그램 만들기</b><br>

당신은 직장에서 레이더 기술을 활용해 차량 주변의 장애물과 사물을 인식하는 프로그램을 만드는 업무를 담당하고 있다. <br>
당신은 다양한 입력 값들로 인식된 사물에 대해 최소 면적을 계산해보는 테스트를 하는 중이다. 이번 테스트의 조건은 다음과 같다. <br>

레이더를 통해 인식된 정보의 입력값은 평면에 N개의 점으로 주어진다. <br>
각각의 점들은 총 K개의 색깔 중 하나를 가지고 있다. <br>
각 점의 색깔은 {1, 2, …, K} 중의 한 정수로 표현된다.<br>

당신은 입력값으로 주어진 K개의 색깔 {1, 2, …, K}에 대해 해당 색깔을 가지는 점들을 적어도 하나씩 포함하는 <br>
사물 중 넓이가 가장 작은 것을 찾아서 그 넓이를 출력하는 프로그램을 작성하려고 한다. <br>
이 때, 각 점을 포함한 사물은 반드시 직사각형으로 인식된다. <br>

여기서 사물로 인식되는 직사각형은 네 변이 모두 수평 혹은 수직인 것에 한정하며, <br>
직사각형의 내부가 아닌 경계에 놓은 점들도 그 직사각형에 포함된다고 생각한다. <br>
직사각형의 가로 또는 세로의 길이가 0이 되어 선분 혹은 점으로 나타나는 경우도 직사각형의 한 경우로 생각하며 <br>
이런 경우 직사각형의(사물) 넓이는 0이다. (하나의 좌표에 여러 개의 점이 있을 수 있다) <br>

주어지는 입력값에 대해 K개의 색을 가진 점들을 적어도 하나씩 포함하는 사물(직사각형) 중 <br>
넓이가 가장 작은 것의 넓이를 출력하는 프로그램을 만들어 보자. <br>

* (10점) 1 ≤ K ≤ 2 <br>
* (15점) 1 ≤ N ≤ 10 <br>
* (25점) 1 ≤ N ≤ 40 <br>
* (50점) 추가 제약 조건 없음. <br>

<입력형식> <br>
입력으로 점의 개수인 자연수 N과 각 점들이 가질 수 있는 색깔의 총 개수인 자연수 K가 첫 줄에 주어진다. <br>
이후 N줄에는 입력으로 주어지는 점의 좌표(x, y)와 그 점의 색깔 k가 세 개의 정수 x, y, k로 각 줄에 주어진다. <br>

* 1 ≤ N ≤ 100
* 1 ≤ K ≤ 20
* -1,000 ≤ x, y ≤ 1,000
* 1 ≤ k ≤ K

<출력형식> <br>
주어진 입력에 대해 K개의 색깔 {1, 2, …, K} 각각에 대해 해당 색깔을 가지는 점들을 <br>
적어도 하나씩 포함하는 사물(직사각형)중 넓이가 가장 작은 것을 찾아서 그 넓이를 정수 형태로 출력한다. <br>

<b> 1. 데이터 입력 (N, M) </b><br>
<pre>
<code>
# map()함수를 이용하여 input()에 입력된 숫자를 int형으로 변환시킴
# split()를 이용하면 입력한 데이터를 띄어쓰기 기준으로 하나씩 잘라 줌 
# split()은 default가 띄어쓰기로 되어 있고, 예를 들어 , 기준으로 자르길 원하면 split(',')라고 입력함
# input()은 기본적으로 데이터를 문자열로 입력함
# 리스트 컴프리헨션 이용하면 한 줄에 루프문 실행하여 리스트를 생성할 수 있음 
N, K = map(int, input().split())   
data = [list(map(int, input().split())) for _ in range(N)]  # 리스트 컴프리헨션
print(data)
</code>
</pre>
<출력>
<pre>
<code>
5 3
3 7 1
5 8 1
6 5 2
7 1 3
9 3 3
[[3, 7, 1], [5, 8, 1], [6, 5, 2], [7, 1, 3], [9, 3, 3]]
</code>
</pre>
<b> 2. 원데이터에서 색깔 분류 </b><br>
색깔별로 데이터 좌표를 분류하여 따로 묶어 준다.
<pre>
<code>
arr = []
for i in range(K):
    arr.append([])
    for j in data:
        if j[2] == i+1:
            arr[i].append([j[0],j[1]])
print(arr)
</code>
</pre>
<출력>
<pre>
<code>
[[[3, 7], [5, 8]], [[6, 5]], [[7, 1], [9, 3]]]
</code>
</pre>
